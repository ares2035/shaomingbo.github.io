<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android笔记 | 邵明博]]></title>
  <link href="http://mingbo.de/blog/categories/androidbi-ji/atom.xml" rel="self"/>
  <link href="http://mingbo.de/"/>
  <updated>2015-01-26T21:28:04+08:00</updated>
  <id>http://mingbo.de/</id>
  <author>
    <name><![CDATA[邵明博]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[定位Native异常]]></title>
    <link href="http://mingbo.de/blog/2015/01/26/how-to-locate-the-native-exception/"/>
    <updated>2015-01-26T21:08:00+08:00</updated>
    <id>http://mingbo.de/blog/2015/01/26/how-to-locate-the-native-exception</id>
    <content type="html"><![CDATA[<h2>0x00 ndk-stack</h2>

<p>Google从<code>NDK r6</code>开始提供这个方便的工具，帮助开发者定位Native 异常。和<code>ndk-build</code>一样，这个命令行工具被放在<code>NDK</code>安装目录下。作为Debug 工具，其操作方法也十分简单：只需在参数里指定包含符号表的<code>so</code>文件即可。</p>

<p>如果需要实时获取异常信息，我们可以直接运行：<code>adb shell logcat | ndk-stack -sym $PROJECT_DIR/obj/local/armeabi</code>；有的时候日志文件并不一定能直接看到，该工具也支持“异步”分析。这里我们首先运行：<code>adb shell logcat &gt; android.log</code>来模拟“异步”获取日志。 在获得日志文件之后，我们拿它喂给命令行工具：<code>ndk-stack -sym $PROJECT_DIR/obj/local/armeabi -dump android.log</code>。</p>

<p>就这样，天书一般的日志文件瞬间变得友好可读了。</p>

<h2>0x01 addr2line以及objdump</h2>

<p>对于有经验的程序员来说，可能更熟悉这2款工具。方法类似，结果相同，所以这里就不再赘述了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[蛋疼的BUG：binder事务异常]]></title>
    <link href="http://mingbo.de/blog/2014/11/11/failed-binder-transaction/"/>
    <updated>2014-11-11T15:15:00+08:00</updated>
    <id>http://mingbo.de/blog/2014/11/11/failed-binder-transaction</id>
    <content type="html"><![CDATA[<p>一句log"<strong>!!! FAILED BINDER TRANSACTION !!!</strong>&ldquo;，伴随着App的崩溃，留下的是程序员深深的思考。定位到android 的源码，此log 出自<code>android_util_Binder.cpp</code>。</p>

<p>```c++</p>

<p>void signalExceptionForError(JNIEnv* env, jobject obj, status_t err, bool canThrowRemoteException)
{</p>

<pre><code>switch (err) {
    ...
    case FAILED_TRANSACTION:
        ALOGE("!!! FAILED BINDER TRANSACTION !!!");
        // TransactionTooLargeException is a checked exception, only throw from certain methods.
        // FIXME: Transaction too large is the most common reason for FAILED_TRANSACTION
        //        but it is not the only one.  The Binder driver can return BR_FAILED_REPLY
        //        for other reasons also, such as if the transaction is malformed or
        //        refers to an FD that has been closed.  We should change the driver
        //        to enable us to distinguish these cases in the future.
        jniThrowException(env, canThrowRemoteException? "android/os/TransactionTooLargeException": "java/lang/RuntimeException", NULL);
        break;
    ...
}
</code></pre>

<p>}</p>

<p>```</p>

<p>很明显，按照注释的描述，我们遇到的问题就转换为了<code>TransactionTooLargeException</code>引起的程序崩溃了。去<a href="http://developer.android.com/reference/android/os/TransactionTooLargeException.html">官网</a>一查，它给出的说明更清晰：远程调用的时候，参数和返回值都以Parcel 的形式保存在<strong>Binder 事务的缓存对象</strong>中。如果参数或返回值过大，则会抛出<code>TransactionTooLargeException</code>异常。</p>

<p>按照这个提示，我跟到驱动层的<code>binder.c</code>的<a href="https://android.googlesource.com/kernel/common.git/+/android-2.6.39/drivers/staging/android/binder.c">代码</a>看了一下<code>binder_transaction</code>以及<code>binder_alloc_buf</code>方法，证实了前面注释代码所言非虚。另外，官方文档提到了一个1M 大小的buffer空间的限制，我翻了几个版本的代码来看，发现其实这个数值并没有写死。buffer 应该是不大于2M而不是它说的1M，但正如文档所说，由于binder 被所有跨进程通讯所共享，即使你的parcel 不大，但是使用binder 的人很多，也有可能造成上述异常。所以，这里解决问题的方法，应该是尽可能的传递小一点的parcel或者使用其他数据通讯方案。是的，说的就是你，不要用binder 传那么多那么大的高清图片了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android内存泄露及分析工具]]></title>
    <link href="http://mingbo.de/blog/2014/10/24/avoiding-android-memory-leaks/"/>
    <updated>2014-10-24T14:42:00+08:00</updated>
    <id>http://mingbo.de/blog/2014/10/24/avoiding-android-memory-leaks</id>
    <content type="html"><![CDATA[<p>话说，任何开发环境，想要取得上乘的性能，内存优化是一个不可避免的话题。虽然android 开发过程中，有<code>GC</code>陪伴，但这并不意味着你可以完全忽略内存的分配与释放。这是因为，不恰当的代码仍然会导致内存泄露，以至于<code>GC</code>也无力回天。</p>

<h3>内存限制</h3>

<p>为了维持多任务的运行环境，android 给每个运行的应用规定了一个内存上限（因不同设备的物理内存大小而变化，常见的有16M~48M不等）。每当你的应用企图在触碰上限的情况下分配内存，就会引发<code>OutOfMemoryError</code>。</p>

<h3>内存泄露</h3>

<p>虚拟机中的内存泄露基本上就一条：代码残留了对象，让<code>GC</code>无法回收。也许这个情况一时半会不会翻起大浪，但也可能在下一秒，就触碰<strong>内存限制</strong>，导致程序崩溃。所以，内存泄露的BUG通常都非常隐蔽、随机、让人头大。</p>

<p>常见的泄露有以下几种：</p>

<ul>
<li><code>Cursor</code>没有关闭</li>
<li><code>registerReceiver</code>之后没有成对的<code>unregisterReceiver</code></li>
<li>I/O Stream没有关闭</li>
<li><code>Context</code>泄露</li>
</ul>


<p>前面3种情况，没啥好说的，在代码层面稍加注意即可避免。最后一种情况可能有些变种需要注意，这里使用2个例子尝试着描述一下。首先借用Romain Guy的例子：</p>

<p>```java
private static Drawable sBackground;</p>

<p>@Override
protected void onCreate(Bundle state) {
  super.onCreate(state);</p>

<p>  TextView label = new TextView(this);
  label.setText(&ldquo;Leaks are bad&rdquo;);</p>

<p>  if (sBackground == null) {</p>

<pre><code>sBackground = getDrawable(R.drawable.large_bitmap);
</code></pre>

<p>  }
  label.setBackgroundDrawable(sBackground);</p>

<p>  setContentView(label);
}
```</p>

<p>万恶的静态变量出现了，引用关系<code>Drawable</code>&ndash;> <code>TextView</code>&ndash;> <code>Activity</code>导致整个Activity 无法被回收。此外，经常被讨论的Webview 泄露，情况也是类似的。解决方法可以参考这个<a href="http://stackoverflow.com/questions/3130654/memory-leak-in-webview">帖子</a>。这里要谈的另外一种<code>Context</code>泄露是由于非静态内部类引用导致的:</p>

<p>```java</p>

<p>public class DemoActivity extends Activity {</p>

<pre><code>class LeakRUN implements Runnable {

    @Override
    public void run() {
        try {
            TimeUnit.DAYS.sleep(365);
        } catch (InterruptedException e) {
        }
    }
}
</code></pre>

<p>}
```</p>

<p>正确的处理这种泄露应当仿造<code>ViewRoot</code>中的内部类<code>W</code>那样使用<a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/2.1_r2/android/view/ViewRoot.java#ViewRoot.W">弱引用</a>。这么做的好处是，一来不会出现空指针，二来不会导致内存泄露。</p>

<h2>内存工具</h2>

<p>尽管上面罗列了种种常见的泄露情况，但实际开发中遇到的现象总是千奇百怪的，解决泄露的方法也会因情况而异。所以，这里更重要的是需要了解如何使用工具来发现应用内存是如何泄露的。</p>

<h3>Logcat</h3>

<p>越简单的方法，往往越直接有效。Logcat 提供实时的虚拟机日志，每当垃圾回收发生的时候，我们会看到这样的日志<code>D/dalvikvm: &lt;GC_Reason&gt; &lt;Amount_freed&gt;, &lt;Heap_stats&gt;, &lt;External_memory_stats&gt;, &lt;Pause_time&gt;</code>。其中，垃圾回收的原因、回收内存的大小这些并不是现在关注的重点，我们的兴趣点应该放在<strong>堆的状态</strong>上。这个状态通常会提供两个数值，“空闲内存的比例”以及“内存占用的比例”。如果后者在每次垃圾回收之后，持续上升，<strong>那么几乎就可以断定出现内存泄露了</strong>。</p>

<h3>Monitor</h3>

<p><strong>Monitor</strong>是一个工具大集合，开发者可以从<code>Android studio/ Eclipse</code>直接找到它的入口，调试人员也可以直接从目录<code>&lt;sdk&gt;/tools/</code>下找到它。比起Logcat 被动的查看log, <code>Heap Update</code>提供了可视化的内存数据界面以及垃圾回收的操作接口。连续的在观察数据、回收内存以及应用交互的过程中往返，可以帮助我们定位<strong>“哪些操作”引起了内存激增</strong>。<code>Allocation Tracker</code>则提供了更为精确的<strong>代码级定位</strong>。</p>

<p><img class="center" src="/images/201410/monitor-vmheap.png"></p>

<h3>adb</h3>

<p>adb 命令行工具提供的内存查询接口则更为灵活，信息也更加丰富。一行命令<code>adb shell dumpsys meminfo &lt;package_name&gt;</code>即可完成操作。有精力的开发者完全可以依此定制一款自己的工具来帮助内存泄露的定位。一般来说，我们可以关注<code>Pss Total</code>以及<code>Private Dirty</code>这两项数据来掌握内存信息，而<code>Objects</code>栏目的数据可以帮助引导我们更直观的发现泄漏的情况。</p>

<p><img class="center" src="/images/201410/dumpsys_meminfo.png"></p>

<h3>Heap Dump</h3>

<p>最有效的工具，肯定需要最后出场。在Monitor 中选择<code>Dump HPROF file</code>，可以导出整个设备的虚拟机内存信息。由于该文件并不是传统的java 虚拟机内存文件，因此需要使用android sdk 中的<code>hprof-conv</code>工具对其进行转换。对于转换后的文件，可以使用<a href="http://www.eclipse.org/mat/downloads.php">Eclipse Memory Analyzer Tool (MAT)</a>进行分析。该工具提供两种不同的视图（<code>Histogram</code>和<code>Dominator tree</code>）分别从不同的视角帮助你分析内存。值得一提的是，如果需要更为精确的导出时机的话，还可以在项目的代码中进行控制。</p>

<p>以上工具的具体使用方法，可以参考以下链接的文献，这里就不再赘述了。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.littleeye.co/blog/2013/06/11/android-memory-management-understanding-app-pss/">Android Memory Management: Understanding App PSS</a></li>
<li><a href="http://www.youtube.com/watch?v=_CruQY55HOk">Memory management for Android Apps</a></li>
<li><a href="http://android-developers.blogspot.com/2009/01/avoiding-memory-leaks.html">Avoiding memory leaks</a></li>
<li><a href="http://developer.android.com/training/articles/memory.html">Managing your app&rsquo;s memory</a></li>
<li><a href="https://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[警惕libgl1-mesa-glx:i386]]></title>
    <link href="http://mingbo.de/blog/2014/10/19/preparing-build-android/"/>
    <updated>2014-10-19T15:13:00+08:00</updated>
    <id>http://mingbo.de/blog/2014/10/19/preparing-build-android</id>
    <content type="html"><![CDATA[<p>编译android工程应该来说没啥技术含量，按照官方的guide line一步一步的做，基本上都还OK。但，之所以想写个日志，主要是因为被这个工程的编译环境搞得有点抓狂了。起初是在<code>osx</code>上折腾，之后发现各种依赖关系搞起来太费神，就开始了转投传说中最稳定、顺畅的ubuntu 12.04了。万万没有想到，在虚拟机上跑了4个小时，最后给我看这个：</p>

<p><img class="center" src="/images/201410/built_android_failed.png"></p>

<p>刚查到<a href="http://blog.csdn.net/g_r_u_b/article/details/8644745">解决方案</a>的时候，打算给虚拟机更大的内存跑编译任务，于是重启了。重启之后，蛋疼的卡在了logo界面。一顿排查，发现原来是在准备编译环境的时候出了问题。</p>

<p><code>bash
sudo apt-get install git gnupg flex bison gperf build-essential \
  zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \
  libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \
  libgl1-mesa-dev g++-multilib mingw32 tofrodos \
  python-markdown libxml2-utils xsltproc zlib1g-dev:i386
</code></p>

<h3>症结所在</h3>

<p>Ubuntu 12.04.5 上执行<code>sudo apt-get install libgl1-mesa-glx:i386</code>时，会提示你安装<code>libgl1-mesa-dri:i386</code>。如果按照这个建议执行，你会发现安装程序会帮你删除一批不兼容的软件，其中包括<code>xorg</code>，最终导致你无法进入桌面。</p>

<p><img class="center" src="/images/201410/remove_xorg_when_install_lib.png"></p>

<h3>解决办法</h3>

<p>将<code>libgl1-mesa-glx:i386</code>替换为<code>libgl1-mesa-glx-lts-&lt;release&gt;:i386</code>，其中release 根据ubuntu的版本可以是<code>Quantal</code>、<code>Raring</code>、<code>Saucy</code>以及<code>Trusty</code>。我自己安装的是<code>libgl1-mesa-glx-lts-Trusty:i386</code>。至此，该问题完美解决。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://wiki.ubuntu.com/Kernel/LTSEnablementStack">LTS Enablement Stacks</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android数据库升级tips]]></title>
    <link href="http://mingbo.de/blog/2014/10/16/a-strategy-for-upgrade-database-in-android/"/>
    <updated>2014-10-16T22:18:00+08:00</updated>
    <id>http://mingbo.de/blog/2014/10/16/a-strategy-for-upgrade-database-in-android</id>
    <content type="html"><![CDATA[<h3>唯一不变的是变化</h3>

<p>App 版本迭代的过程中，一定会遇到sqlite 数据库需要升级的情况。一个简单粗暴的解决方法，是不顾用户的数据，直接去重建各个数据表。显然，今天要分享的并不是这个粗暴的方法。</p>

<h3>常见的困惑</h3>

<p><code>SQLiteOpenHelper</code>提供了一个处理数据库升级的API<code>onUpgrade(final SQLiteDatabase db, int from, final int to)</code>。从语义上来看，升级策略的描述应该有一个起始点<code>from</code>，也还应该有一个终点<code>to</code>。但由于起始点的不确定性，致使这里的代码分支会略显复杂。老实讲，在写这篇日志之前，我都没有把握温柔细致的处理好这件事。</p>

<h3>灵感来源于android源码</h3>

<p><code>DownloadManager</code>也使用数据库存储下载状态。其子类<code>DatabaseHelper</code>将升级函数降维，把原本复杂的升级过程，分解为多个原子的升级过程，而这个原子过程是简单、确定的。直接上代码吧：</p>

<p>```java
@Override
 public void onUpgrade(final SQLiteDatabase db, int oldV, final int newV) {</p>

<pre><code>...
//循环体内，每次只升一个版本
for (int version = oldV + 1; version &lt;= newV; version++) {
            upgradeTo(db, version);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>```java</p>

<p>//Upgrade database from (version &ndash; 1) to version.
private void upgradeTo(SQLiteDatabase db, int version) {</p>

<pre><code>switch (version) {
    case 100:
        createDownloadsTable(db);
        break;
    case 101:
        createHeadersTable(db);
        break;
    case 102:
        addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_IS_PUBLIC_API,
                          "INTEGER NOT NULL DEFAULT 0");
        break;
    case 105:
        fillNullValues(db);
        break;
    ...
    default:
        throw new IllegalStateException("Don't know how to upgrade to " + version);
    }
</code></pre>

<p>}
```</p>

<p>以上代码不仅逻辑清晰，而且还能很好的复用。比如在<code>onCreate</code>函数里需要初始化数，就可以直接调用<code>upgradeTo(db, CURRENT_VERSION)</code>.这样一来，无论是从哪个版本升级上来，都能平滑的处理版本问题了。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://android.googlesource.com/platform/packages/providers/DownloadProvider/+/master/src/com/android/providers/downloads/DownloadProvider.java#228">DownloadProvider</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
