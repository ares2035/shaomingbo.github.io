<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android笔记 | 邵明博]]></title>
  <link href="http://mingbo.de/blog/categories/androidbi-ji/atom.xml" rel="self"/>
  <link href="http://mingbo.de/"/>
  <updated>2014-11-08T18:01:48+08:00</updated>
  <id>http://mingbo.de/</id>
  <author>
    <name><![CDATA[邵明博]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[android内存泄露及分析工具]]></title>
    <link href="http://mingbo.de/blog/2014/10/24/avoiding-android-memory-leaks/"/>
    <updated>2014-10-24T14:42:00+08:00</updated>
    <id>http://mingbo.de/blog/2014/10/24/avoiding-android-memory-leaks</id>
    <content type="html"><![CDATA[<p>话说，任何开发环境，想要取得上乘的性能，内存优化是一个不可避免的话题。虽然android 开发过程中，有<code>GC</code>陪伴，但这并不意味着你可以完全忽略内存的分配与释放。这是因为，不恰当的代码仍然会导致内存泄露，以至于<code>GC</code>也无力回天。</p>

<h3>内存限制</h3>

<p>为了维持多任务的运行环境，android 给每个运行的应用规定了一个内存上限（因不同设备的物理内存大小而变化，常见的有16M~48M不等）。每当你的应用企图在触碰上限的情况下分配内存，就会引发<code>OutOfMemoryError</code>。</p>

<h3>内存泄露</h3>

<p>虚拟机中的内存泄露基本上就一条：代码残留了对象，让<code>GC</code>无法回收。也许这个情况一时半会不会翻起大浪，但也可能在下一秒，就触碰<strong>内存限制</strong>，导致程序崩溃。所以，内存泄露的BUG通常都非常隐蔽、随机、让人头大。</p>

<p>常见的泄露有以下几种：</p>

<ul>
<li><code>Cursor</code>没有关闭</li>
<li><code>registerReceiver</code>之后没有成对的<code>unregisterReceiver</code></li>
<li>I/O Stream没有关闭</li>
<li><code>Context</code>泄露</li>
</ul>


<p>前面3种情况，没啥好说的，在代码层面稍加注意即可避免。最后一种情况可能有些变种需要注意，这里使用2个例子尝试着描述一下。首先借用Romain Guy的例子：</p>

<p>```java
private static Drawable sBackground;</p>

<p>@Override
protected void onCreate(Bundle state) {
  super.onCreate(state);</p>

<p>  TextView label = new TextView(this);
  label.setText(&ldquo;Leaks are bad&rdquo;);</p>

<p>  if (sBackground == null) {</p>

<pre><code>sBackground = getDrawable(R.drawable.large_bitmap);
</code></pre>

<p>  }
  label.setBackgroundDrawable(sBackground);</p>

<p>  setContentView(label);
}
```</p>

<p>万恶的静态变量出现了，引用关系<code>Drawable</code>&ndash;> <code>TextView</code>&ndash;> <code>Activity</code>导致整个Activity 无法被回收。此外，经常被讨论的Webview 泄露，情况也是类似的。解决方法可以参考这个<a href="http://stackoverflow.com/questions/3130654/memory-leak-in-webview">帖子</a>。这里要谈的另外一种<code>Context</code>泄露是由于非静态内部类引用导致的:</p>

<p>```java</p>

<p>public class DemoActivity extends Activity {</p>

<pre><code>class LeakRUN implements Runnable {

    @Override
    public void run() {
        try {
            TimeUnit.DAYS.sleep(365);
        } catch (InterruptedException e) {
        }
    }
}
</code></pre>

<p>}
```</p>

<p>正确的处理这种泄露应当仿造<code>ViewRoot</code>中的内部类<code>W</code>那样使用<a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/2.1_r2/android/view/ViewRoot.java#ViewRoot.W">弱引用</a>。这么做的好处是，一来不会出现空指针，二来不会导致内存泄露。</p>

<h2>内存工具</h2>

<p>尽管上面罗列了种种常见的泄露情况，但实际开发中遇到的现象总是千奇百怪的，解决泄露的方法也会因情况而异。所以，这里更重要的是需要了解如何使用工具来发现应用内存是如何泄露的。</p>

<h3>Logcat</h3>

<p>越简单的方法，往往越直接有效。Logcat 提供实时的虚拟机日志，每当垃圾回收发生的时候，我们会看到这样的日志<code>D/dalvikvm: &lt;GC_Reason&gt; &lt;Amount_freed&gt;, &lt;Heap_stats&gt;, &lt;External_memory_stats&gt;, &lt;Pause_time&gt;</code>。其中，垃圾回收的原因、回收内存的大小这些并不是现在关注的重点，我们的兴趣点应该放在<strong>堆的状态</strong>上。这个状态通常会提供两个数值，“空闲内存的比例”以及“内存占用的比例”。如果后者在每次垃圾回收之后，持续上升，<strong>那么几乎就可以断定出现内存泄露了</strong>。</p>

<h3>Monitor</h3>

<p><strong>Monitor</strong>是一个工具大集合，开发者可以从<code>Android studio/ Eclipse</code>直接找到它的入口，调试人员也可以直接从目录<code>&lt;sdk&gt;/tools/</code>下找到它。比起Logcat 被动的查看log, <code>Heap Update</code>提供了可视化的内存数据界面以及垃圾回收的操作接口。连续的在观察数据、回收内存以及应用交互的过程中往返，可以帮助我们定位<strong>“哪些操作”引起了内存激增</strong>。<code>Allocation Tracker</code>则提供了更为精确的<strong>代码级定位</strong>。</p>

<p><img class="center" src="/images/201410/monitor-vmheap.png"></p>

<h3>adb</h3>

<p>adb 命令行工具提供的内存查询接口则更为灵活，信息也更加丰富。一行命令<code>adb shell dumpsys meminfo &lt;package_name&gt;</code>即可完成操作。有精力的开发者完全可以依此定制一款自己的工具来帮助内存泄露的定位。一般来说，我们可以关注<code>Pss Total</code>以及<code>Private Dirty</code>这两项数据来掌握内存信息，而<code>Objects</code>栏目的数据可以帮助引导我们更直观的发现泄漏的情况。</p>

<p><img class="center" src="/images/201410/dumpsys_meminfo.png"></p>

<h3>Heap Dump</h3>

<p>最有效的工具，肯定需要最后出场。在Monitor 中选择<code>Dump HPROF file</code>，可以导出整个设备的虚拟机内存信息。由于该文件并不是传统的java 虚拟机内存文件，因此需要使用android sdk 中的<code>hprof-conv</code>工具对其进行转换。对于转换后的文件，可以使用<a href="http://www.eclipse.org/mat/downloads.php">Eclipse Memory Analyzer Tool (MAT)</a>进行分析。该工具提供两种不同的视图（<code>Histogram</code>和<code>Dominator tree</code>）分别从不同的视角帮助你分析内存。值得一提的是，如果需要更为精确的导出时机的话，还可以在项目的代码中进行控制。</p>

<p>以上工具的具体使用方法，可以参考以下链接的文献，这里就不再赘述了。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.littleeye.co/blog/2013/06/11/android-memory-management-understanding-app-pss/">Android Memory Management: Understanding App PSS</a></li>
<li><a href="http://www.youtube.com/watch?v=_CruQY55HOk">Memory management for Android Apps</a></li>
<li><a href="http://android-developers.blogspot.com/2009/01/avoiding-memory-leaks.html">Avoiding memory leaks</a></li>
<li><a href="http://developer.android.com/training/articles/memory.html">Managing your app&rsquo;s memory</a></li>
<li><a href="https://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[警惕libgl1-mesa-glx:i386]]></title>
    <link href="http://mingbo.de/blog/2014/10/19/preparing-build-android/"/>
    <updated>2014-10-19T15:13:00+08:00</updated>
    <id>http://mingbo.de/blog/2014/10/19/preparing-build-android</id>
    <content type="html"><![CDATA[<p>编译android工程应该来说没啥技术含量，按照官方的guide line一步一步的做，基本上都还OK。但，之所以想写个日志，主要是因为被这个工程的编译环境搞得有点抓狂了。起初是在<code>osx</code>上折腾，之后发现各种依赖关系搞起来太费神，就开始了转投传说中最稳定、顺畅的ubuntu 12.04了。万万没有想到，在虚拟机上跑了4个小时，最后给我看这个：</p>

<p><img class="center" src="/images/201410/built_android_failed.png"></p>

<p>刚查到<a href="http://blog.csdn.net/g_r_u_b/article/details/8644745">解决方案</a>的时候，打算给虚拟机更大的内存跑编译任务，于是重启了。重启之后，蛋疼的卡在了logo界面。一顿排查，发现原来是在准备编译环境的时候出了问题。</p>

<p><code>bash
sudo apt-get install git gnupg flex bison gperf build-essential \
  zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \
  libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \
  libgl1-mesa-dev g++-multilib mingw32 tofrodos \
  python-markdown libxml2-utils xsltproc zlib1g-dev:i386
</code></p>

<h3>症结所在</h3>

<p>Ubuntu 12.04.5 上执行<code>sudo apt-get install libgl1-mesa-glx:i386</code>时，会提示你安装<code>libgl1-mesa-dri:i386</code>。如果按照这个建议执行，你会发现安装程序会帮你删除一批不兼容的软件，其中包括<code>xorg</code>，最终导致你无法进入桌面。</p>

<p><img class="center" src="/images/201410/remove_xorg_when_install_lib.png"></p>

<h3>解决办法</h3>

<p>将<code>libgl1-mesa-glx:i386</code>替换为<code>libgl1-mesa-glx-lts-&lt;release&gt;:i386</code>，其中release 根据ubuntu的版本可以是<code>Quantal</code>、<code>Raring</code>、<code>Saucy</code>以及<code>Trusty</code>。我自己安装的是<code>libgl1-mesa-glx-lts-Trusty:i386</code>。至此，该问题完美解决。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://wiki.ubuntu.com/Kernel/LTSEnablementStack">LTS Enablement Stacks</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android数据库升级tips]]></title>
    <link href="http://mingbo.de/blog/2014/10/16/a-strategy-for-upgrade-database-in-android/"/>
    <updated>2014-10-16T22:18:00+08:00</updated>
    <id>http://mingbo.de/blog/2014/10/16/a-strategy-for-upgrade-database-in-android</id>
    <content type="html"><![CDATA[<h3>唯一不变的是变化</h3>

<p>App 版本迭代的过程中，一定会遇到sqlite 数据库需要升级的情况。一个简单粗暴的解决方法，是不顾用户的数据，直接去重建各个数据表。显然，今天要分享的并不是这个粗暴的方法。</p>

<h3>常见的困惑</h3>

<p><code>SQLiteOpenHelper</code>提供了一个处理数据库升级的API<code>onUpgrade(final SQLiteDatabase db, int from, final int to)</code>。从语义上来看，升级策略的描述应该有一个起始点<code>from</code>，也还应该有一个终点<code>to</code>。但由于起始点的不确定性，致使这里的代码分支会略显复杂。老实讲，在写这篇日志之前，我都没有把握温柔细致的处理好这件事。</p>

<h3>灵感来源于android源码</h3>

<p><code>DownloadManager</code>也使用数据库存储下载状态。其子类<code>DatabaseHelper</code>将升级函数降维，把原本复杂的升级过程，分解为多个原子的升级过程，而这个原子过程是简单、确定的。直接上代码吧：</p>

<p>```java
@Override
 public void onUpgrade(final SQLiteDatabase db, int oldV, final int newV) {</p>

<pre><code>...
//循环体内，每次只升一个版本
for (int version = oldV + 1; version &lt;= newV; version++) {
            upgradeTo(db, version);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>```java</p>

<p>//Upgrade database from (version &ndash; 1) to version.
private void upgradeTo(SQLiteDatabase db, int version) {</p>

<pre><code>switch (version) {
    case 100:
        createDownloadsTable(db);
        break;
    case 101:
        createHeadersTable(db);
        break;
    case 102:
        addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_IS_PUBLIC_API,
                          "INTEGER NOT NULL DEFAULT 0");
        break;
    case 105:
        fillNullValues(db);
        break;
    ...
    default:
        throw new IllegalStateException("Don't know how to upgrade to " + version);
    }
</code></pre>

<p>}
```</p>

<p>以上代码不仅逻辑清晰，而且还能很好的复用。比如在<code>onCreate</code>函数里需要初始化数，就可以直接调用<code>upgradeTo(db, CURRENT_VERSION)</code>.这样一来，无论是从哪个版本升级上来，都能平滑的处理版本问题了。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://android.googlesource.com/platform/packages/providers/DownloadProvider/+/master/src/com/android/providers/downloads/DownloadProvider.java#228">DownloadProvider</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈谈android屏幕适配]]></title>
    <link href="http://mingbo.de/blog/2014/10/08/supporting-multiple-screens/"/>
    <updated>2014-10-08T17:32:00+08:00</updated>
    <id>http://mingbo.de/blog/2014/10/08/supporting-multiple-screens</id>
    <content type="html"><![CDATA[<h2>痛并快乐着</h2>

<p><a href="http://opensignal.com/reports/2014/android-fragmentation/">&ldquo;碎片化&rdquo;</a>像一个魔咒，从android 平台问世那天至今，伴随其成长。客观的说，这样的<strong>多样性</strong>的确帮助android 俘获了数以亿计的用户，但却给该平台下的设计师和开发者带来了不小的挑战。学会适应这样的生态环境，不仅需要更加广泛的知识还需要更加高超的技巧。不过话说回来，在满足各式各样的用户的过程中，你将成为一个更好的设计师或开发者。不得不说，这是一个值得追求的挑战！</p>

<h2>目标</h2>

<p>想要收获挑战的胜利果实，必须要有一个明确的目标。本文并不想纠结于品牌、乃至OS 版本的碎片化等问题，那需要更多的篇幅和精力去探讨。这里只想专注于屏幕适配这一问题进行集中的讨论。</p>

<p>从<a href="http://pan.baidu.com/s/1qWHNVVe">OpenSignal这份报告</a>来看，2014年支持android 的设备就有18796种，而设备屏幕的种类也是千奇百怪的。理想状态下，为每一种目标设备设计一套视觉资源，似乎就不存在适配的问题。但，没有一个设计师会愿意接受这种方案（<em>工作量太大了好吗？</em>）。就算有“勇士”接受了这样的设计任务，应用安装包也将变得臃肿不堪（<em>apk太大了好吗？</em>）。</p>

<p><img class="center" src="/images/201410/screen_fragmentaion_2014.png"></p>

<p>这样看来，屏幕适配的目标就清晰了许多：尽可能设计<strong>可重用</strong>的视觉资源，让<strong>目标设备</strong>良好呈现。这通常需要视觉人员以及程序猿的通力配合，才能达到预期的效果，<strong>任何一方的懈怠，都会导致功亏一篑</strong>。</p>

<h2>怎么搞</h2>

<p>设计的好不好，决定了适配程度的优劣。这里谈到的设计与视觉效果关系不大，而主要是<strong>适配设计</strong>。从以往的经验来看，设计师们习惯了用<strong>视觉语言</strong>去描绘设计，而程序猿们则习惯了用代码去实现设计。所以适配问题只有在视觉走查这个阶段才会让双方感到蛋疼。</p>

<h3>明确需要支持的范围</h3>

<p>那么多屏幕，可能有很多并不是我们的目标用户（比如TV屏），将有限的精力瞄准该做的事从来不会有错。国内的一些第三方<a href="http://www.umindex.com/">市场报告</a>能够给我们这方面的“灵感”，另外Google 也会定时更新在全球范围内的<a href="https://developer.android.com/about/dashboards/index.html">统计报告</a>(需要翻墙)。</p>

<h3>使用模糊定位和相对布局</h3>

<p>通常来讲，设计师们直接给出的标注往往会让android 程序猿们头疼。这是因为，设计稿通常绑定了一个静态的设备分辨率，这就导致其标注出来的数字具有相当的局限性——<em>只对一种分辨率有效！</em>。换句话讲，在适配屏幕的过程中，程序猿们<strong>并不希望看到一些硬编码的数值标注，因为这会使得这份设计过渡依赖当前这个分辨率</strong>，而使得适配难上加难了。</p>

<p>好在Android 平台为我们提供了强大的适配语言：使用<code>wrap_content</code>以及<code>match_parent</code>来描述单个控件的大小，还有超级强大的<code>RelativeLayout</code>来描述多个控件的组合&hellip;&hellip;系统在运行时，会通过动态计算摆放它们的位置。用自然语言说，<strong>最好</strong>不要告诉程序员具体大小，而是告诉他们一些个相对数值。让我们看个例子：</p>

<p><img class="center" src="/images/201410/tagging.png"></p>

<p>“先战一把”的按钮并不需要知道自身要有多长多宽(使用<code>match_parent</code>)，而只要知道自己和周围的距离，就能摆放恰当了; 再看看应用图标的摆放甚至都不需要知道左右的相对距离（使用<code>wrap_content</code>），只要给出类似“水平居中”这样的模糊定位，即可良好呈现。</p>

<p>通常一个设计稿，如果从上到下，从左到右（反过来也行），能够让每个控件尽量使用模糊定位和相对布局，那么适配各种屏幕，简直就是轻而易举。不过，有些刁巧的设计并不适用于这类描述。那么这个时候，可能就需要产品经理去权衡展示效果和适配力度之间的问题了。</p>

<h3>使用资源限定符</h3>

<p>细心的读者可能已经发现，上面的方法虽然能够尽可能的规避具体控件的大小，但是“漏网之鱼”以及一些<strong>相对距离还是硬编码</strong>来的啊！虽然他们只是边边角角，但是为了视觉呈现的效果，还是可以使用资源限定符来进行适配的。简单的说，资源限定符可以让设备在程序运行的时候，自动选择与设备最匹配的资源。不过，在正式介绍资源限定符之前，恐怕还得介绍一些个相关概念：</p>

<ul>
<li>屏幕密度：一言以蔽之，同样的物理尺寸，密度大的屏幕通常显示更为细腻。这是因为该屏幕<strong>单位面积内</strong>可以用来显示的“点”更多。所以，屏幕密度的单位是dpi(dot per inch，每英寸点)就很好理解了。这里还需要强调的是，屏幕尺寸和屏幕密度是2个独立的概念。一些个山寨手机虽然屏幕大，但显示效果却不尽如人意。这是因为山寨屏的单位面积内可用来显示的“点”太少，导致图像细节在显示过程中丢失。android 平台目前将屏幕密度分为6个等级：low（ldpi~120dpi）, medium（mdpi~160dpi）, high(hdpi~240dpi), extra-high(xhdpi~320dpi), extra-extra-high(xxhdpi~480dpi), and extra-extra-extra-high(xxxhdpi~640dpi)。</li>
<li>密度独立的像素(dp, Density-independent pixel): 是一个虚拟的度量单位，与屏幕密度无关。试想，在没有dp 的年代，直接使用像素去描述布局和位置。那么，1个像素在<code>ldpi</code>的屏幕占1/120, 而在<code>xxdpi</code>的屏幕上只占1/480。那么同样的视觉设计在4寸山寨屏与4寸视网膜屏的显示会相差3倍！dp 的出现完美的解决了这个问题：系统会根据当前设备密度的需要，透明的缩放尺寸。</li>
</ul>


<p>也许你已经看出，我们的适配都寄希望于<strong>系统的自动缩放</strong>了——嗯，我想你已经领悟到了精髓。现在继续来讲前面的“硬编码”问题。所以，即使是硬编码，我们也不能直接使用<code>px</code>来描述，而应该使用<code>dp</code>。那关屏幕密度什么事呢？关资源限定符什么事呢？</p>

<p>可以说，除代码外的所有<strong>静态资源</strong>，全部都分布在不同类型的工程目录下，而不同类型的目录<strong>还细分了各种属性</strong>，这些属性帮助系统在运行时能够根据设备自身的配置从相应的目录中动态的加载这些静态资源，以达到适配的效果。android 资源文件夹使用<code>-</code>来分割限定符。拿图片文件来说，<code>drawable-hdpi</code>文件夹所存放的图片适用于高密度(high density)的设备屏幕，而<code>drawable-xhdpi</code>则适用于超高密度(etra high density)的设备屏幕。下图所示的<code>ic_launcher.png</code>图片重复出现在了三个文件夹里。当请求名为 ic_launcher 的图片时，系统运行时会根据设备配置自动选择适应的图片。这能让我们根据不同屏幕尺寸最优化图片的显示，但是重复存储的图片势必造成浪费资源。</p>

<p><img class="center" src="/images/201410/res-qualifiers.png"></p>

<p>动态加载静态资源的过程，可能会遇到“找不到最合适资源”的情况。这个时候，系统会拿其他目录中<strong>同名的资源进行缩放处理</strong>。举个例子，系统需要加载<code>drawable-xhdpi</code>下的<code>ic_launcher.png</code>文件，但发现找不到！这个时候找遍了资源目录却发现只有<code>drawable-hdpi</code>下有<code>ic_launcher.png</code>。系统会毫不犹豫的加载，并将其放大1.3倍。设计师看到这里可能会有点激动，“放大？那图片资源会不会失真？”没错，这个担心很合理。所以，通常的做法是保证最高密度文件夹下有相应的文件，那么系统在动态加载的时候只会处理缩小的过程。</p>

<p>事实上，利用上面这个特点，我们在设计输出时，应该直接瞄准那些高密度规格的设备，比如<code>1920 * 1080</code>。一次输出后，填满<code>drawable-xxhdpi</code>文件夹。这样直接可以一次性适配的分辨率就有<code>640 * 360</code>、<code>1280 * 720</code>、<code>960 * 540</code>。</p>

<p>同理，前面谈到的硬编码的相对数值（静态常量资源），应该合理的分布在不同文件夹下的dimens.xml文件里。对，这里可能就需要视觉人员给出多套标注，以达到最大限度的复用！</p>

<p><img class="center" src="/images/201410/use-size-qualifiers.png"></p>

<p>你以为资源限定符就这样介绍清楚了？图样图森破！不过<a href="https://developer.android.com/guide/topics/resources/providing-resources.html#BestMatch">这段文字</a>应该能够让你对动态加载静态资源有一个清晰的认识。想要了解更多，请访问developer.android.com 进行系统的学习。(*^__^*)</p>

<h3>使用9-patch</h3>

<p>那么多屏幕要适配，要是图片本身就有自适应的能力该多好啊！9 patch bitmap 将赋予你这种魔力。这是一种图片格式，允许设计人员定义图片能够被拉伸的区域，<strong>通常被用在背景性质的图片中</strong>。这样带来的好处是：一方面给背景显示带来了灵活性（可拉伸），另一方面还大大降低了图片的“重量”。官方提供了简便的<a href="http://developer.android.com/tools/help/draw9patch.html">制作工具</a>（需翻墙）, 网络上也有大量的文章介绍，这里就不再赘述了。显然，这类资源如果得到复用，那么必能极大地减小应用安装包的大小。另外，各种按钮、背景的图片资源如果能在设计时就考虑复用的话，那也必是极好的。</p>

<h2>唠叨</h2>

<p>android 平台提供的适配工具，我想先介绍到这里。本文没有提到“为特殊的屏幕类型提供不同的布局”这类细节，是因为觉得其工作原理和上述内容类似，当然太懒也是一个不容掩饰的原因。一句话总结，无非是<strong>提供可替换的静态资源，让系统自身去操心如何适配</strong>罢了。</p>

<h2>参考文献</h2>

<ul>
<li><a href="https://developer.android.com/training/multiscreen/screensizes.html">Supporting Different Screen Sizes</a></li>
<li><a href="https://developer.android.com/guide/practices/screens_support.html">Supporting Multiple Screens</a></li>
<li><a href="https://developer.android.com/guide/topics/resources/providing-resources.html#BestMatch">How Android Finds the Best-matching Resource</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android无线调试]]></title>
    <link href="http://mingbo.de/blog/2013/12/03/debug-over-wifi/"/>
    <updated>2013-12-03T20:04:00+08:00</updated>
    <id>http://mingbo.de/blog/2013/12/03/debug-over-wifi</id>
    <content type="html"><![CDATA[<p>使用无线调试对于我来讲，只有一个理由：爱惜手机电池。长时间的调试过程，使得我们的爱机必须通过USB 与电脑相连。长此以往，手机电池就会变得非常不经用。</p>

<p>很早之前，以为只有获得ROOT 权限的手机才能开启这个功能，直到有一天被我发现statckoverflow 上的一个<a href="http://stackoverflow.com/questions/2604727/how-can-i-connect-to-android-with-adb-over-tcp">帖子</a>。（之所以会有这个错觉，是因为看到Google Play上提供的相关APP 都有root权限的声明）。那么，这里我就分别总结一下，不同情况下该如何使用<strong>无线adb</strong></p>

<h2>如果手机拥有ROOT 权限</h2>

<p>在shell 里执行以下命令：
<code>bash 开启adb无线调试
su
setprop service.adb.tcp.port 5555
stop adbd
start adbd
</code>
这也是大部分完成无线调试APP的核心基础：在应用内使用Process 对象来执行这些命令。其中<code>start/stop adbd</code>，你可以通过手动开启/关闭调试模式来完成同样的目的。如果希望回到usb 模式，则应该将<code>tcp.port</code>修改回-1。</p>

<h2>如果手机没有ROOT 权限</h2>

<ul>
<li>事情并没有因为少一个权限而变得麻烦</li>
<li>首先将手机通过USB连接到PC</li>
<li>在命令行中执行<code>adb tcpip 5555</code>，即可开启无线adb了</li>
<li>想要恢复有线adb时，在保持手机与PC连接的前提下，命令行中执行<code>adb usb</code>即可</li>
</ul>


<h2>连接与断开手机</h2>

<ul>
<li>开启无线adb后，想要通过WIFI连接手机，请先确保电脑和手机在同一网段</li>
<li>连接：adb connect android-device-ip</li>
<li>终止：adb disconnect</li>
</ul>

]]></content>
  </entry>
  
</feed>
